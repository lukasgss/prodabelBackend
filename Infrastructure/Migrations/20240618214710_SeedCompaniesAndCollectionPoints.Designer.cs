// <auto-generated />
using System;
using Infrastructure.Persistence.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240618214710_SeedCompaniesAndCollectionPoints")]
    partial class SeedCompaniesAndCollectionPoints
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.CollectionPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CollectionPoints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Rua José Clemente Pereira, 440, Ipiranga, Belo Horizonte/MG",
                            Cep = "31160-160",
                            CompanyId = 1,
                            Number = 440
                        },
                        new
                        {
                            Id = 2,
                            Address = "PRAÇA RIO BRANCO, 100 - SEM COMPLEMENTO - CENTRO - BELO HORIZONTE/MG",
                            Cep = "30110-002",
                            CompanyId = 2,
                            Number = 100
                        },
                        new
                        {
                            Id = 3,
                            Address = "RUA DA BELGICA, 676 - LOJA 13 - GLORIA - CONTAGEM/MG",
                            Cep = "32340-003",
                            CompanyId = 3,
                            Number = 676
                        },
                        new
                        {
                            Id = 4,
                            Address = "AV. PRES.ANTONIO CARLOS, 2030 - CACHOEIRINHA - BELO HORIZONTE/MG",
                            Cep = "31130-122",
                            CompanyId = 4,
                            Number = 2030
                        },
                        new
                        {
                            Id = 5,
                            Address = "R. Rad. Ubaldo Ferreira, 20 - Castelo, Belo Horizonte - MG",
                            Cep = "31330-294",
                            CompanyId = 5,
                            Number = 20
                        },
                        new
                        {
                            Id = 6,
                            Address = "Rua Oscár Castanheira, 112 - Dona Clara, Belo Horizonte - MG",
                            Cep = "31260-360",
                            CompanyId = 6,
                            Number = 112
                        },
                        new
                        {
                            Id = 7,
                            Address = "Av. Duque de Caxias, 810 - Esplanada da Estacao, Itabira - MG",
                            Cep = "35900-236",
                            CompanyId = 7,
                            Number = 810
                        },
                        new
                        {
                            Id = 8,
                            Address = "Edifício Maletta |, R. da Bahia, 1148 - Sala 602 - Centro, Belo Horizonte - MG",
                            Cep = "30160-011",
                            CompanyId = 8,
                            Number = 1148
                        },
                        new
                        {
                            Id = 9,
                            Address = "R. Pouso Alegre, 2616 - Horto, Belo Horizonte - MG",
                            Cep = "31010-514",
                            CompanyId = 9,
                            Number = 2616
                        },
                        new
                        {
                            Id = 10,
                            Address = "Rua Professor José Vieira de Mendonça, 770 - Engenho Nogueira, Belo Horizonte - MG",
                            Cep = "31310-260",
                            CompanyId = 10,
                            Number = 770
                        },
                        new
                        {
                            Id = 11,
                            Address = "R. Rad. Ubaldo Ferreira, 20 - Castelo, Belo Horizonte - MG",
                            Cep = "31330-294",
                            CompanyId = 11,
                            Number = 20
                        },
                        new
                        {
                            Id = 12,
                            Address = "Av. do Contorno, 8000 - Lourdes, Belo Horizonte - MG",
                            Cep = "30110-932",
                            CompanyId = 12,
                            Number = 8000
                        },
                        new
                        {
                            Id = 13,
                            Address = "R. Bernardo Guimarães, 3000 - Santo Agostinho, Belo Horizonte - MG",
                            Cep = "30140-083",
                            CompanyId = 13,
                            Number = 3000
                        },
                        new
                        {
                            Id = 14,
                            Address = "R. Canadá, 454 - Boa Vista, Patos de Minas - MG",
                            Cep = "38705-116",
                            CompanyId = 14,
                            Number = 454
                        },
                        new
                        {
                            Id = 15,
                            Address = "Rua Venâncio Augusto Gomes, 50 - Maj. Lage de Cima, Itabira - MG",
                            Cep = "35900-842",
                            CompanyId = 15,
                            Number = 50
                        },
                        new
                        {
                            Id = 16,
                            Address = "R. Padre Eustáquio, 443 - Carlos Prates, Belo Horizonte - MG",
                            Cep = "30710-580",
                            CompanyId = 16,
                            Number = 443
                        });
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("AddressNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CepDeliveryEndRange")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CepDeliveryInitialRange")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CollectionLine")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Rua José Clemente Pereira, 440, Ipiranga, Belo Horizonte/MG",
                            AddressNumber = 440,
                            Cep = "31160-160",
                            CepDeliveryEndRange = "31164-160",
                            CepDeliveryInitialRange = "31156-160",
                            Cnpj = "46.648.151/0001-51",
                            CollectionLine = 2,
                            Name = "Prodabel - Centro de Recondicionamento de Computadores",
                            OwnerId = 1,
                            PhoneNumber = "3277-4771"
                        },
                        new
                        {
                            Id = 2,
                            Address = "PRAÇA RIO BRANCO, 100 - SEM COMPLEMENTO - CENTRO - 30110-002 - BELO HORIZONTE/MG",
                            AddressNumber = 100,
                            Cep = "30110-002",
                            CepDeliveryEndRange = "30114-002",
                            CepDeliveryInitialRange = "30106-002",
                            Cnpj = "23.514.057/0001-04",
                            CollectionLine = 2,
                            Name = "PRAÇA RIO BRANCO, 100 - SEM COMPLEMENTO - CENTRO - 30110-002 - BELO HORIZONTE/MG",
                            OwnerId = 1,
                            PhoneNumber = "Não informado"
                        },
                        new
                        {
                            Id = 3,
                            Address = "RUA DA BELGICA, 676 - LOJA 13 - GLORIA - CONTAGEM/MG",
                            AddressNumber = 676,
                            Cep = "32340-003",
                            CepDeliveryEndRange = "32344-003",
                            CepDeliveryInitialRange = "32336-003",
                            Cnpj = "43.570.787/0001-30",
                            CollectionLine = 2,
                            Name = "CRJ SSISTEC LTDA ME",
                            OwnerId = 1,
                            PhoneNumber = "Não informado"
                        },
                        new
                        {
                            Id = 4,
                            Address = "AV. PRES.ANTONIO CARLOS, 2030 - CACHOEIRINHA - BELO HORIZONTE/MG",
                            AddressNumber = 2030,
                            Cep = "31130-122",
                            CepDeliveryEndRange = "31134-122",
                            CepDeliveryInitialRange = "31126-122",
                            Cnpj = "32.622.877/0001-00",
                            CollectionLine = 0,
                            Name = "ASSISTÊNCIA TÉCNICA ELETROGEL REFRIGERACAO LTDA",
                            OwnerId = 1,
                            PhoneNumber = "Não informado"
                        },
                        new
                        {
                            Id = 5,
                            Address = "R. Rad. Ubaldo Ferreira, 20 - Castelo, Belo Horizonte - MG",
                            AddressNumber = 20,
                            Cep = "31330-294",
                            CepDeliveryEndRange = "31334-294",
                            CepDeliveryInitialRange = "31326-294",
                            Cnpj = "57.698.273/0001-79",
                            CollectionLine = 0,
                            Name = "PROPAM",
                            OwnerId = 1,
                            PhoneNumber = "(31) 3277-7422"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Rua Oscár Castanheira, 112 - Dona Clara, Belo Horizonte - MG",
                            AddressNumber = 112,
                            Cep = "31260-360",
                            CepDeliveryEndRange = "31264-360",
                            CepDeliveryInitialRange = "31256-360",
                            Cnpj = "13.214.175/0001-43",
                            CollectionLine = 0,
                            Name = "Hemar Ltda",
                            OwnerId = 1,
                            PhoneNumber = "(31) 3226-5024"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Av. Duque de Caxias, 810 - Esplanada da Estacao, Itabira - MG",
                            AddressNumber = 810,
                            Cep = "35900-236",
                            CepDeliveryEndRange = "35904-236",
                            CepDeliveryInitialRange = "35896-236",
                            Cnpj = "13.101.937/0001-03",
                            CollectionLine = 0,
                            Name = "ACITA - ITABIRA",
                            OwnerId = 1,
                            PhoneNumber = "(31) 3831-2025"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Edifício Maletta |, R. da Bahia, 1148 - Sala 602 - Centro, Belo Horizonte - MG",
                            AddressNumber = 1148,
                            Cep = "30160-011",
                            CepDeliveryEndRange = "30164-011",
                            CepDeliveryInitialRange = "30156-011",
                            Cnpj = "90.523.932/0001-01",
                            CollectionLine = 1,
                            Name = "AMI TECNO - AMI Informática e Tecnologia Ltda.",
                            OwnerId = 1,
                            PhoneNumber = "(31) 3213-2087"
                        },
                        new
                        {
                            Id = 9,
                            Address = "R. Pouso Alegre, 2616 - Horto, Belo Horizonte - MG",
                            AddressNumber = 2616,
                            Cep = "31010-514",
                            CepDeliveryEndRange = "31014-514",
                            CepDeliveryInitialRange = "31006-514",
                            Cnpj = "44.289.073/0001-10",
                            CollectionLine = 1,
                            Name = "Átria Informática",
                            OwnerId = 1,
                            PhoneNumber = "(31) 98457-5197"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Rua Professor José Vieira de Mendonça, 770 - Engenho Nogueira, Belo Horizonte - MG",
                            AddressNumber = 770,
                            Cep = "31310-260",
                            CepDeliveryEndRange = "31314-260",
                            CepDeliveryInitialRange = "31306-260",
                            Cnpj = "72.643.472/0001-73",
                            CollectionLine = 1,
                            Name = "BH-TEC Parque Tecnológico",
                            OwnerId = 1,
                            PhoneNumber = "(31) 3401-1000"
                        },
                        new
                        {
                            Id = 11,
                            Address = "R. Rad. Ubaldo Ferreira, 20 - Castelo, Belo Horizonte - MG",
                            AddressNumber = 20,
                            Cep = "31330-294",
                            CepDeliveryEndRange = "31334-294",
                            CepDeliveryInitialRange = "31326-294",
                            Cnpj = "05.736.618/0001-38",
                            CollectionLine = 1,
                            Name = "CEA PROPAM",
                            OwnerId = 1,
                            PhoneNumber = "(31) 3364-3266"
                        },
                        new
                        {
                            Id = 12,
                            Address = "Av. do Contorno, 8000 - Lourdes, Belo Horizonte - MG",
                            AddressNumber = 8000,
                            Cep = "30110-932",
                            CepDeliveryEndRange = "30114-932",
                            CepDeliveryInitialRange = "30106-932",
                            Cnpj = "95.073.524/0001-19",
                            CollectionLine = 1,
                            Name = "Condomínio do Edifício Wall Street – Centro Empresarial",
                            OwnerId = 1,
                            PhoneNumber = "(31) 2535-7475"
                        },
                        new
                        {
                            Id = 13,
                            Address = "R. Bernardo Guimarães, 3000 - Santo Agostinho, Belo Horizonte - MG",
                            AddressNumber = 3000,
                            Cep = "30140-083",
                            CepDeliveryEndRange = "30144-083",
                            CepDeliveryInitialRange = "30136-083",
                            Cnpj = "47.175.895/0001-69",
                            CollectionLine = 3,
                            Name = "Ctrl+Play",
                            OwnerId = 1,
                            PhoneNumber = "(31) 3582-8726"
                        },
                        new
                        {
                            Id = 14,
                            Address = "R. Canadá, 454 - Boa Vista, Patos de Minas - MG",
                            AddressNumber = 454,
                            Cep = "38705-116",
                            CepDeliveryEndRange = "38709-116",
                            CepDeliveryInitialRange = "38701-116",
                            Cnpj = "01.750.374/0001-97",
                            CollectionLine = 2,
                            Name = "CVT PATOS DE MINAS",
                            OwnerId = 1,
                            PhoneNumber = "(34) 3822-9700"
                        },
                        new
                        {
                            Id = 15,
                            Address = "Rua Venâncio Augusto Gomes, 50 - Maj. Lage de Cima, Itabira - MG",
                            AddressNumber = 50,
                            Cep = "35900-842",
                            CepDeliveryEndRange = "35904-842",
                            CepDeliveryInitialRange = "35896-842",
                            Cnpj = "68.813.023/0001-59",
                            CollectionLine = 1,
                            Name = "Funcesi/Fundação Comunitária de Ensino Superior de Itabira - FUNCESI",
                            OwnerId = 1,
                            PhoneNumber = "(31) 3839-3600"
                        },
                        new
                        {
                            Id = 16,
                            Address = "R. Padre Eustáquio, 443 - Carlos Prates, Belo Horizonte - MG",
                            AddressNumber = 20,
                            Cep = "30710-580",
                            CepDeliveryEndRange = "30714-580",
                            CepDeliveryInitialRange = "30706-580",
                            Cnpj = "94.589.971/0001-62",
                            CollectionLine = 0,
                            Name = "Litium Informatica",
                            OwnerId = 1,
                            PhoneNumber = "(31) 3442-9571"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "310c0400-8e8c-4ebb-a41a-ae3c652438dc",
                            Email = "prodabel@admin.com.br",
                            EmailConfirmed = true,
                            FullName = "Admin Prodabel",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEH+PeNU4e7TL3lgqrF533vighX86xqwBdJaMiTbDneNLvMerHdFmxc2YocfVrRjfng==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "prodabel@admin.com.br"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CollectionPoint", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("CollectionPoints")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.HasOne("Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("CollectionPoints");
                });
#pragma warning restore 612, 618
        }
    }
}
